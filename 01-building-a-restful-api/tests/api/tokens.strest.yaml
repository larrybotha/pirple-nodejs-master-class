---
version: 2

variables:
  baseUrl: http://localhost:3000/api
  endpoint: tokens
  password: 'password'
  schemaValidate:
    properties:
      id:
        type: string
      expires:
        type: number
      phone:
        type: string
    required:
      - id
      - expires
      - phone

requests:
  # setup
  tokens_user_create:
    request:
      url: '<$ baseUrl $>/users'
      method: POST
      postData:
        mimeType: 'application/json'
        text:
          phone: '<$ Faker("phone.phoneNumberFormat") $>'
          password: 'password'
          firstName: '<$ Faker("name.firstName") $>'
          lastName: '<$ Faker("name.lastName") $>'
          tosAgreement: true
  # end setup

  # success responses
  tokens_create:
    request:
      url: '<$ baseUrl $>/<$ endpoint $>'
      method: POST
      postData:
        mimeType: 'application/json'
        text:
          phone: <$ tokens_user_create.content.phone $>
          password: <$ password $>
    validate:
      - jsonpath: status
        expect: 201
      - jsonpath: content
        jsonschema: <$ schemaValidate | dump | safe $>
      - jsonpath: content.phone
        expect: <$ tokens_user_create.content.phone $>

  tokens_get:
    request:
      url: '<$ baseUrl $>/<$ endpoint $>/<$ tokens_create.content.id $>'
      method: GET
      headers:
        - name: phone
          value: <$ tokens_user_create.content.phone $>
        - name: token
          value: <$ tokens_create.content.id $>
    validate:
      - jsonpath: status
        expect: 200
      - jsonpath: content
        jsonschema: <$ schemaValidate | dump | safe $>
      - jsonpath: content.phone
        expect: <$ tokens_user_create.content.phone $>

  tokens_put:
    request:
      url: '<$ baseUrl $>/<$ endpoint $>/<$ tokens_create.content.id $>'
      method: PUT
      headers:
        - name: phone
          value: <$ tokens_user_create.content.phone $>
        - name: token
          value: <$ tokens_create.content.id $>
      postData:
        mimeType: 'application/json'
        text:
          extend: true
    validate:
      - jsonpath: status
        expect: 200
      - jsonpath: content
        jsonschema: <$ schemaValidate | dump | safe $>
    # log: true

  # missing auth headers
  tokens_create_missing_phone:
    request:
      url: '<$ baseUrl $>/<$ endpoint $>'
      method: POST
      postData:
        mimeType: 'application/json'
        text:
          password: '<$ password $>'
    validate:
      - jsonpath: status
        expect: 400

  tokens_create_missing_password:
    request:
      url: '<$ baseUrl $>/<$ endpoint $>'
      method: POST
      postData:
        mimeType: 'application/json'
        text:
          phone: '<$ tokens_user_create.content.phone $>'
    validate:
      - jsonpath: status
        expect: 400

  tokens_get_missing_auth_header:
    request:
      url: '<$ baseUrl $>/<$ endpoint $>/<$ tokens_create.content.id $>'
      method: GET
    validate:
      - jsonpath: status
        expect: 401

  tokens_put_missing_auth_header:
    request:
      url: <$ baseUrl $>/<$ endpoint $>
      method: PUT
    validate:
      - jsonpath: status
        expect: 401

  tokens_delete_missing_auth_header:
    request:
      url: <$ baseUrl $>/<$ endpoint $>
      method: DELETE
    validate:
      - jsonpath: status
        expect: 401

  # start cleanup
  tokens_delete:
    request:
      url: '<$ baseUrl $>/<$ endpoint $>'
      method: DELETE
      headers:
        - name: phone
          value: <$ tokens_user_create.content.phone $>
        - name: token
          value: <$ tokens_create.content.id $>
    validate:
      - jsonpath: status
        expect: 204

  tokens_user_delete:
    request:
      url: '<$ baseUrl $>/users/<$ tokens_user_create.content.phone $>/'
      method: DELETE
  # end cleanup
